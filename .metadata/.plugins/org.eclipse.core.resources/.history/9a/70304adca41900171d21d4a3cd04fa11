package clueGame;

import java.awt.Color;
import java.awt.Graphics;

public class BoardCell {
	private int row;
	private int col;
	private char initial;
	private DoorDirection direction;
	private int rectSize = 30;

	public void setInitial(char initial) {
		this.initial = initial;
	}

	public BoardCell() {
		super();
		row = 0;
		col = 0;
	}

	public BoardCell(int row, int col) {
		super();
		this.row = row;
		this.col = col;
	}
	
	public boolean isWalkway(){
		if(initial == 'W')
			return true;
		return false;
	}
	
	public boolean isRoom(){
		if((initial != 'W') && (direction == DoorDirection.NONE))
			return true;
		return false;
	}
	
	public boolean isDoorway(){
		if(this.direction != DoorDirection.NONE){
			return true;
		}
		return false;
	}

	public void setDirection(DoorDirection direction) {
		this.direction = direction;
	}

	public Object getDoorDirection() {
		//expand for each option
		return this.direction;
	}

	public int getRow() {
		return row;
	}

	public int getCol() {
		return col;
	}

	public DoorDirection getDirection() {
		return direction;
	}

	public Object getInitial() {
		return initial;
	}
	
	public void draw(Graphics g, Board b) {
		int rows = getRow();
		int cols = getCol();
		if (isWalkway()) {
			g.setColor(Color.BLUE);
			
		}
		else
			g.setColor(Color.GRAY);
		g.fillRect(col * rectSize, row * rectSize, rectSize, rectSize);
		g.setColor(Color.BLACK);
		g.drawRect(col * rectSize, row * rectSize, rectSize, rectSize);
		//Check for doorways and add line accordingly
		if (isDoorway()) {
			g.setColor(Color.WHITE);
			switch (direction) {
			case UP:
				g.fillRect(col * rectSize, row * rectSize, rectSize, rectSize / 10);
				break;
			case DOWN:
				g.fillRect(col * rectSize, row * rectSize + 1, rectSize, rectSize / 10);
				break;
			}
		}
	}
	
	
}
